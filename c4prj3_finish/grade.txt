Grading at Thu Aug 27 18:35:19 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o cards.o cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o deck.o deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o eval.o eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o future.o future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o input.o input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o main.o main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==5577== Memcheck, a memory error detector
==5577== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5577== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5577== Command: ./poker inp.txt 20000
==5577== Parent PID: 5576
==5577== 
==5577== Invalid read of size 8
==5577==    at 0x401160: add_card_to (deck.c:67)
==5577==    by 0x402E67: hand_from_string (input.c:54)
==5577==    by 0x402F91: read_input (input.c:18)
==5577==    by 0x400A04: main (main.c:54)
==5577==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5577== 
==5577== 
==5577== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5577==  Access not within mapped region at address 0x8
==5577==    at 0x401160: add_card_to (deck.c:67)
==5577==    by 0x402E67: hand_from_string (input.c:54)
==5577==    by 0x402F91: read_input (input.c:18)
==5577==    by 0x400A04: main (main.c:54)
==5577==  If you believe this happened as a result of a stack
==5577==  overflow in your program's main thread (unlikely but
==5577==  possible), you can try to increase the size of the
==5577==  main thread stack using the --main-stacksize= flag.
==5577==  The main thread stack size used in this run was 8388608.
==5577== 
==5577== HEAP SUMMARY:
==5577==     in use at exit: 696 bytes in 4 blocks
==5577==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5577== 
==5577== LEAK SUMMARY:
==5577==    definitely lost: 8 bytes in 1 blocks
==5577==    indirectly lost: 0 bytes in 0 blocks
==5577==      possibly lost: 0 bytes in 0 blocks
==5577==    still reachable: 688 bytes in 3 blocks
==5577==         suppressed: 0 bytes in 0 blocks
==5577== Rerun with --leak-check=full to see details of leaked memory
==5577== 
==5577== For counts of detected and suppressed errors, rerun with: -v
==5577== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==5582== Memcheck, a memory error detector
==5582== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5582== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5582== Command: ./poker inp.txt 25000
==5582== Parent PID: 5581
==5582== 
==5582== Invalid read of size 8
==5582==    at 0x401160: add_card_to (deck.c:67)
==5582==    by 0x402E67: hand_from_string (input.c:54)
==5582==    by 0x402F91: read_input (input.c:18)
==5582==    by 0x400A04: main (main.c:54)
==5582==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5582== 
==5582== 
==5582== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5582==  Access not within mapped region at address 0x8
==5582==    at 0x401160: add_card_to (deck.c:67)
==5582==    by 0x402E67: hand_from_string (input.c:54)
==5582==    by 0x402F91: read_input (input.c:18)
==5582==    by 0x400A04: main (main.c:54)
==5582==  If you believe this happened as a result of a stack
==5582==  overflow in your program's main thread (unlikely but
==5582==  possible), you can try to increase the size of the
==5582==  main thread stack using the --main-stacksize= flag.
==5582==  The main thread stack size used in this run was 8388608.
==5582== 
==5582== HEAP SUMMARY:
==5582==     in use at exit: 696 bytes in 4 blocks
==5582==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5582== 
==5582== LEAK SUMMARY:
==5582==    definitely lost: 8 bytes in 1 blocks
==5582==    indirectly lost: 0 bytes in 0 blocks
==5582==      possibly lost: 0 bytes in 0 blocks
==5582==    still reachable: 688 bytes in 3 blocks
==5582==         suppressed: 0 bytes in 0 blocks
==5582== Rerun with --leak-check=full to see details of leaked memory
==5582== 
==5582== For counts of detected and suppressed errors, rerun with: -v
==5582== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==5587== Memcheck, a memory error detector
==5587== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5587== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5587== Command: ./poker inp2.txt 25000
==5587== Parent PID: 5586
==5587== 
==5587== Invalid read of size 8
==5587==    at 0x401160: add_card_to (deck.c:67)
==5587==    by 0x402E67: hand_from_string (input.c:54)
==5587==    by 0x402F91: read_input (input.c:18)
==5587==    by 0x400A04: main (main.c:54)
==5587==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5587== 
==5587== 
==5587== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5587==  Access not within mapped region at address 0x8
==5587==    at 0x401160: add_card_to (deck.c:67)
==5587==    by 0x402E67: hand_from_string (input.c:54)
==5587==    by 0x402F91: read_input (input.c:18)
==5587==    by 0x400A04: main (main.c:54)
==5587==  If you believe this happened as a result of a stack
==5587==  overflow in your program's main thread (unlikely but
==5587==  possible), you can try to increase the size of the
==5587==  main thread stack using the --main-stacksize= flag.
==5587==  The main thread stack size used in this run was 8388608.
==5587== 
==5587== HEAP SUMMARY:
==5587==     in use at exit: 696 bytes in 4 blocks
==5587==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5587== 
==5587== LEAK SUMMARY:
==5587==    definitely lost: 8 bytes in 1 blocks
==5587==    indirectly lost: 0 bytes in 0 blocks
==5587==      possibly lost: 0 bytes in 0 blocks
==5587==    still reachable: 688 bytes in 3 blocks
==5587==         suppressed: 0 bytes in 0 blocks
==5587== Rerun with --leak-check=full to see details of leaked memory
==5587== 
==5587== For counts of detected and suppressed errors, rerun with: -v
==5587== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==5592== Memcheck, a memory error detector
==5592== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5592== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5592== Command: ./poker inp2.txt 25000
==5592== Parent PID: 5591
==5592== 
==5592== Invalid read of size 8
==5592==    at 0x401160: add_card_to (deck.c:67)
==5592==    by 0x402E67: hand_from_string (input.c:54)
==5592==    by 0x402F91: read_input (input.c:18)
==5592==    by 0x400A04: main (main.c:54)
==5592==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5592== 
==5592== 
==5592== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5592==  Access not within mapped region at address 0x8
==5592==    at 0x401160: add_card_to (deck.c:67)
==5592==    by 0x402E67: hand_from_string (input.c:54)
==5592==    by 0x402F91: read_input (input.c:18)
==5592==    by 0x400A04: main (main.c:54)
==5592==  If you believe this happened as a result of a stack
==5592==  overflow in your program's main thread (unlikely but
==5592==  possible), you can try to increase the size of the
==5592==  main thread stack using the --main-stacksize= flag.
==5592==  The main thread stack size used in this run was 8388608.
==5592== 
==5592== HEAP SUMMARY:
==5592==     in use at exit: 696 bytes in 4 blocks
==5592==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5592== 
==5592== LEAK SUMMARY:
==5592==    definitely lost: 8 bytes in 1 blocks
==5592==    indirectly lost: 0 bytes in 0 blocks
==5592==      possibly lost: 0 bytes in 0 blocks
==5592==    still reachable: 688 bytes in 3 blocks
==5592==         suppressed: 0 bytes in 0 blocks
==5592== Rerun with --leak-check=full to see details of leaked memory
==5592== 
==5592== For counts of detected and suppressed errors, rerun with: -v
==5592== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==5597== Memcheck, a memory error detector
==5597== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5597== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5597== Command: ./poker inp3.txt 80000
==5597== Parent PID: 5596
==5597== 
==5597== Invalid read of size 8
==5597==    at 0x401160: add_card_to (deck.c:67)
==5597==    by 0x402E67: hand_from_string (input.c:54)
==5597==    by 0x402F91: read_input (input.c:18)
==5597==    by 0x400A04: main (main.c:54)
==5597==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5597== 
==5597== 
==5597== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5597==  Access not within mapped region at address 0x8
==5597==    at 0x401160: add_card_to (deck.c:67)
==5597==    by 0x402E67: hand_from_string (input.c:54)
==5597==    by 0x402F91: read_input (input.c:18)
==5597==    by 0x400A04: main (main.c:54)
==5597==  If you believe this happened as a result of a stack
==5597==  overflow in your program's main thread (unlikely but
==5597==  possible), you can try to increase the size of the
==5597==  main thread stack using the --main-stacksize= flag.
==5597==  The main thread stack size used in this run was 8388608.
==5597== 
==5597== HEAP SUMMARY:
==5597==     in use at exit: 696 bytes in 4 blocks
==5597==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5597== 
==5597== LEAK SUMMARY:
==5597==    definitely lost: 8 bytes in 1 blocks
==5597==    indirectly lost: 0 bytes in 0 blocks
==5597==      possibly lost: 0 bytes in 0 blocks
==5597==    still reachable: 688 bytes in 3 blocks
==5597==         suppressed: 0 bytes in 0 blocks
==5597== Rerun with --leak-check=full to see details of leaked memory
==5597== 
==5597== For counts of detected and suppressed errors, rerun with: -v
==5597== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==5602== Memcheck, a memory error detector
==5602== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5602== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5602== Command: ./poker inp.txt 30000
==5602== Parent PID: 5601
==5602== 
==5602== Invalid read of size 8
==5602==    at 0x401160: add_card_to (deck.c:67)
==5602==    by 0x402E67: hand_from_string (input.c:54)
==5602==    by 0x402F91: read_input (input.c:18)
==5602==    by 0x400A04: main (main.c:54)
==5602==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5602== 
==5602== 
==5602== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5602==  Access not within mapped region at address 0x8
==5602==    at 0x401160: add_card_to (deck.c:67)
==5602==    by 0x402E67: hand_from_string (input.c:54)
==5602==    by 0x402F91: read_input (input.c:18)
==5602==    by 0x400A04: main (main.c:54)
==5602==  If you believe this happened as a result of a stack
==5602==  overflow in your program's main thread (unlikely but
==5602==  possible), you can try to increase the size of the
==5602==  main thread stack using the --main-stacksize= flag.
==5602==  The main thread stack size used in this run was 8388608.
==5602== 
==5602== HEAP SUMMARY:
==5602==     in use at exit: 696 bytes in 4 blocks
==5602==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5602== 
==5602== LEAK SUMMARY:
==5602==    definitely lost: 8 bytes in 1 blocks
==5602==    indirectly lost: 0 bytes in 0 blocks
==5602==      possibly lost: 0 bytes in 0 blocks
==5602==    still reachable: 688 bytes in 3 blocks
==5602==         suppressed: 0 bytes in 0 blocks
==5602== Rerun with --leak-check=full to see details of leaked memory
==5602== 
==5602== For counts of detected and suppressed errors, rerun with: -v
==5602== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==5607== Memcheck, a memory error detector
==5607== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5607== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5607== Command: ./poker inp.txt 30000
==5607== Parent PID: 5606
==5607== 
==5607== Invalid read of size 8
==5607==    at 0x401160: add_card_to (deck.c:67)
==5607==    by 0x402E67: hand_from_string (input.c:54)
==5607==    by 0x402F91: read_input (input.c:18)
==5607==    by 0x400A04: main (main.c:54)
==5607==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5607== 
==5607== 
==5607== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5607==  Access not within mapped region at address 0x8
==5607==    at 0x401160: add_card_to (deck.c:67)
==5607==    by 0x402E67: hand_from_string (input.c:54)
==5607==    by 0x402F91: read_input (input.c:18)
==5607==    by 0x400A04: main (main.c:54)
==5607==  If you believe this happened as a result of a stack
==5607==  overflow in your program's main thread (unlikely but
==5607==  possible), you can try to increase the size of the
==5607==  main thread stack using the --main-stacksize= flag.
==5607==  The main thread stack size used in this run was 8388608.
==5607== 
==5607== HEAP SUMMARY:
==5607==     in use at exit: 696 bytes in 4 blocks
==5607==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5607== 
==5607== LEAK SUMMARY:
==5607==    definitely lost: 8 bytes in 1 blocks
==5607==    indirectly lost: 0 bytes in 0 blocks
==5607==      possibly lost: 0 bytes in 0 blocks
==5607==    still reachable: 688 bytes in 3 blocks
==5607==         suppressed: 0 bytes in 0 blocks
==5607== Rerun with --leak-check=full to see details of leaked memory
==5607== 
==5607== For counts of detected and suppressed errors, rerun with: -v
==5607== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==5612== Memcheck, a memory error detector
==5612== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5612== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5612== Command: ./poker inp2.txt 40000
==5612== Parent PID: 5611
==5612== 
==5612== Invalid read of size 8
==5612==    at 0x401160: add_card_to (deck.c:67)
==5612==    by 0x402E67: hand_from_string (input.c:54)
==5612==    by 0x402F91: read_input (input.c:18)
==5612==    by 0x400A04: main (main.c:54)
==5612==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5612== 
==5612== 
==5612== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5612==  Access not within mapped region at address 0x8
==5612==    at 0x401160: add_card_to (deck.c:67)
==5612==    by 0x402E67: hand_from_string (input.c:54)
==5612==    by 0x402F91: read_input (input.c:18)
==5612==    by 0x400A04: main (main.c:54)
==5612==  If you believe this happened as a result of a stack
==5612==  overflow in your program's main thread (unlikely but
==5612==  possible), you can try to increase the size of the
==5612==  main thread stack using the --main-stacksize= flag.
==5612==  The main thread stack size used in this run was 8388608.
==5612== 
==5612== HEAP SUMMARY:
==5612==     in use at exit: 696 bytes in 4 blocks
==5612==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5612== 
==5612== LEAK SUMMARY:
==5612==    definitely lost: 8 bytes in 1 blocks
==5612==    indirectly lost: 0 bytes in 0 blocks
==5612==      possibly lost: 0 bytes in 0 blocks
==5612==    still reachable: 688 bytes in 3 blocks
==5612==         suppressed: 0 bytes in 0 blocks
==5612== Rerun with --leak-check=full to see details of leaked memory
==5612== 
==5612== For counts of detected and suppressed errors, rerun with: -v
==5612== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==5617== Memcheck, a memory error detector
==5617== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5617== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5617== Command: ./poker whacky.txt 100000
==5617== Parent PID: 5616
==5617== 
==5617== Invalid read of size 8
==5617==    at 0x401160: add_card_to (deck.c:67)
==5617==    by 0x402E67: hand_from_string (input.c:54)
==5617==    by 0x402F91: read_input (input.c:18)
==5617==    by 0x400A04: main (main.c:54)
==5617==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==5617== 
==5617== 
==5617== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5617==  Access not within mapped region at address 0x8
==5617==    at 0x401160: add_card_to (deck.c:67)
==5617==    by 0x402E67: hand_from_string (input.c:54)
==5617==    by 0x402F91: read_input (input.c:18)
==5617==    by 0x400A04: main (main.c:54)
==5617==  If you believe this happened as a result of a stack
==5617==  overflow in your program's main thread (unlikely but
==5617==  possible), you can try to increase the size of the
==5617==  main thread stack using the --main-stacksize= flag.
==5617==  The main thread stack size used in this run was 8388608.
==5617== 
==5617== HEAP SUMMARY:
==5617==     in use at exit: 696 bytes in 4 blocks
==5617==   total heap usage: 5 allocs, 1 frees, 4,792 bytes allocated
==5617== 
==5617== LEAK SUMMARY:
==5617==    definitely lost: 8 bytes in 1 blocks
==5617==    indirectly lost: 0 bytes in 0 blocks
==5617==      possibly lost: 0 bytes in 0 blocks
==5617==    still reachable: 688 bytes in 3 blocks
==5617==         suppressed: 0 bytes in 0 blocks
==5617== Rerun with --leak-check=full to see details of leaked memory
==5617== 
==5617== For counts of detected and suppressed errors, rerun with: -v
==5617== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
