Grading at Tue Aug  4 18:28:02 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==372== Memcheck, a memory error detector
==372== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==372== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==372== Command: ./tester hands.txt draw.txt
==372== Parent PID: 371
==372== 
==372== Invalid read of size 8
==372==    at 0x401005: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==372==    by 0x401C9A: main (test-input.c:81)
==372==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==372== 
==372== 
==372== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==372==  Access not within mapped region at address 0x8
==372==    at 0x401005: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==372==    by 0x401C9A: main (test-input.c:81)
==372==  If you believe this happened as a result of a stack
==372==  overflow in your program's main thread (unlikely but
==372==  possible), you can try to increase the size of the
==372==  main thread stack using the --main-stacksize= flag.
==372==  The main thread stack size used in this run was 8388608.
==372== 
==372== HEAP SUMMARY:
==372==     in use at exit: 152 bytes in 12 blocks
==372==   total heap usage: 23 allocs, 11 frees, 13,848 bytes allocated
==372== 
==372== LEAK SUMMARY:
==372==    definitely lost: 16 bytes in 1 blocks
==372==    indirectly lost: 0 bytes in 0 blocks
==372==      possibly lost: 0 bytes in 0 blocks
==372==    still reachable: 136 bytes in 11 blocks
==372==         suppressed: 0 bytes in 0 blocks
==372== Rerun with --leak-check=full to see details of leaked memory
==372== 
==372== For counts of detected and suppressed errors, rerun with: -v
==372== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==377== Memcheck, a memory error detector
==377== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==377== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==377== Command: ./tester hands.txt draw.txt
==377== Parent PID: 376
==377== 
==377== Invalid read of size 8
==377==    at 0x401005: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==377==    by 0x401C9A: main (test-input.c:81)
==377==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==377== 
==377== 
==377== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==377==  Access not within mapped region at address 0x8
==377==    at 0x401005: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==377==    by 0x401C9A: main (test-input.c:81)
==377==  If you believe this happened as a result of a stack
==377==  overflow in your program's main thread (unlikely but
==377==  possible), you can try to increase the size of the
==377==  main thread stack using the --main-stacksize= flag.
==377==  The main thread stack size used in this run was 8388608.
==377== 
==377== HEAP SUMMARY:
==377==     in use at exit: 504 bytes in 34 blocks
==377==   total heap usage: 61 allocs, 27 frees, 14,584 bytes allocated
==377== 
==377== LEAK SUMMARY:
==377==    definitely lost: 16 bytes in 1 blocks
==377==    indirectly lost: 0 bytes in 0 blocks
==377==      possibly lost: 0 bytes in 0 blocks
==377==    still reachable: 488 bytes in 33 blocks
==377==         suppressed: 0 bytes in 0 blocks
==377== Rerun with --leak-check=full to see details of leaked memory
==377== 
==377== For counts of detected and suppressed errors, rerun with: -v
==377== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==383== Memcheck, a memory error detector
==383== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==383== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==383== Command: ./tester h.txt d.txt
==383== Parent PID: 382
==383== 
==383== Invalid write of size 8
==383==    at 0x400EB8: add_future_card (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x401BC0: main (test-input.c:69)
==383==  Address 0x5205798 is 0 bytes after a block of size 8 alloc'd
==383==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x401BC0: main (test-input.c:69)
==383== 
==383== Invalid write of size 8
==383==    at 0x400E9B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x401BC0: main (test-input.c:69)
==383==  Address 0x52057f0 is 0 bytes after a block of size 16 alloc'd
==383==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x401BC0: main (test-input.c:69)
==383== 

valgrind: m_mallocfree.c:277 (mk_plain_bszB): Assertion 'bszB != 0' failed.
valgrind: This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==383==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x38091F36: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x38051369: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x380D4CF3: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==383==    by 0x380E3946: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 383)
==383==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==383==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==383==    by 0x401BC0: main (test-input.c:69)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==389== Memcheck, a memory error detector
==389== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==389== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==389== Command: ./tester i1 i2
==389== Parent PID: 388
==389== 
==389== Invalid write of size 8
==389==    at 0x400EB8: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x401BC0: main (test-input.c:69)
==389==  Address 0x5205598 is 0 bytes after a block of size 8 alloc'd
==389==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==389==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==389==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x401BC0: main (test-input.c:69)
==389== 
==389== Invalid write of size 8
==389==    at 0x400E9B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x401BC0: main (test-input.c:69)
==389==  Address 0x52055f0 is 0 bytes after a block of size 16 alloc'd
==389==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==389==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x401BC0: main (test-input.c:69)
==389== 

valgrind: m_mallocfree.c:277 (mk_plain_bszB): Assertion 'bszB != 0' failed.
valgrind: This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==389==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x38091F36: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x38051369: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x380D4CF3: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==389==    by 0x380E3946: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 389)
==389==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==389==    by 0x400E7A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D16: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400ABA: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x401BC0: main (test-input.c:69)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.


Overall Grade: F
